{% unless settings.shipping_calculator == 'Disabled' %}

<div id="shipping-calculator" class="cart-drawer__shipping-calculator-container">

  <h3 class="h4">{{ settings.shipping_calculator_heading | default: 'Get shipping estimates' }}</h3>

  <div>
    <p class="field">
      <label for="address_country">Country</label>
      <select id="address_country" name="address[country]" data-default="{% if shop.customer_accounts_enabled and customer %}{{ customer.default_address.country }}{% elsif settings.shipping_calculator_default_country != '' %}{{ settings.shipping_calculator_default_country }}{% endif %}">{{ country_option_tags }}</select>
    </p>
    <p class="field" id="address_province_container" style="display:none;">
      <label for="address_province" id="address_province_label">Province</label>
      <select id="address_province" name="address[province]" data-default="{% if shop.customer_accounts_enabled and customer and customer.default_address.province != '' %}{{ customer.default_address.province }}{% endif %}"></select>
    </p>
    <p class="field">
      <label for="address_zip">Zip/Postal Code</label>
      <input type="text" id="address_zip" name="address[zip]"{% if shop.customer_accounts_enabled and customer %} value="{{ customer.default_address.zip }}"{% endif %} />
    </p>
    <p class="field">
      <input type="button" id="get_rates_btn" class="get-rates btn button" value="{{ settings.shipping_calculator_submit_button_label | default: 'Calculate shipping' }}" />
    </p>
  </div>

  <div id="wrapper-response"></div>

</div>

<style>
    /* TODO: Revise class names. Use BEM or SMACSS */
    .cart-drawer__shipping-calculator-container {
        margin-top: 50px;
    }
    #wrapper-response {
        margin-top: 5px;
    }
    #address_zip:focus.address_zip__input--error {
        outline-color: #eb4f47;
    }
    #address_zip:focus.transitioning {
        -webkit-transition: outline-color 0.75s linear 2s;
        -moz-transition: outline-color 0.75s linear 2s;
        -o-transition: outline-color 0.75s linear 2s;
        transition: outline-color 0.75s linear 2s;
    }
    #shipping-rates-feedback.error.startingColor {
        color: #eb4f47;
    }
    #shipping-rates-feedback.error.transitioning {
        -webkit-transition: color 0.75s linear 2s;
        -moz-transition: color 0.75s linear 2s;
        -o-transition: color 0.75s linear 2s;
        transition: color 0.75s linear 2s;
    }
</style>

<script id="shipping-calculator-response-template" type="text/template">
  <p id="shipping-rates-feedback" <% if (success) { %> class="success" <% } else { %> class="error" <% } %>>
  <% if (success) { %>
  <% if (rates.length > 1) { %>
  There are <%- rates.length %> shipping rates available for <%- address %>, starting at <%= rates[0].price %>.
  <% } else if (rates.length == 1) { %>
  There is one shipping rate available for <%- address %>.
  <% } else { %>
  We do not ship to this destination.
  <% } %>
  <% } else { %>
  <%- errorFeedback %>
  <% } %>
  </p>
  <ul id="shipping-rates">
    <% for (var i=0; i<rates.length; i++) { %>
    <li><%- rates[i].name %> at <%= rates[i].price %></li>
    <% } %>
  </ul>
</script>

<!--[if lte IE 8]>
<style> #shipping-calculator { display: none; } </style>
<![endif]-->

{{ '//cdnjs.cloudflare.com/ajax/libs/underscore.js/1.7.0/underscore-min.js' | script_tag }}
{{ '/services/javascripts/countries.js' | script_tag }}
{{ 'shopify_common.js' | shopify_asset_url | script_tag }}
{{ 'jquery.cart.min.js' | asset_url | script_tag }}

<script>
    // NOTE:  Some of these custom enhancements may be better implemented in jquery.cart.js.
    // if we had access to the un-minimized version.

    // Dien
    // Retrieves user-entered address info from session storage, if any, and sets as defaults
    jQuery(function loadSessionStoredAddress() {
        try {
            console.log('Restoring saved shipping address...');
            const country = sessionStorage.getItem('shipping-calculator-country');
            const province = sessionStorage.getItem('shipping-calculator-province');
            const zip = sessionStorage.getItem('shipping-calculator-zip');
//            console.log('Setting country to: ' + `#address_country option[value="${country}"]`);
            if (country) jQuery('#address_country').attr('data-default', country);
            if (province) jQuery('#address_province').attr('data-default', province);
            if (zip) jQuery('#address_zip').val(jQuery('<div>').html(zip).text());
        }
        catch (e) {
            console.log('Session storage not available: ' + e);
        }
    });

    // Dien
    // Stores user-entered address info in session storage before leaving cart page
    jQuery(function () {
        // Store field values before cart page unload
        jQuery(window).on('beforeunload', function sessionStoreAddress() {
            console.log('Session storing shipping address...');
            try {
                var zip = jQuery('#address_zip').val();
                const sanitizedZip = zip ? jQuery('<div>').text(zip).html() : '';
                sessionStorage.setItem('shipping-calculator-country', jQuery('#address_country').val() || '');
                sessionStorage.setItem('shipping-calculator-province', jQuery('#address_province').val() || '');
                sessionStorage.setItem('shipping-calculator-zip', sanitizedZip);
                // Debug
                console.log("Sanitized Zip: " + sanitizedZip);
                console.log(sessionStorage.getItem('shipping-calculator-country'));
                console.log(sessionStorage.getItem('shipping-calculator-province'));
                console.log(sessionStorage.getItem('shipping-calculator-zip'));
            }
            catch(e) {
                console.log('Session storage not available: ' + e);
            }
        });
    });

    Shopify.Cart.ShippingCalculator.show( {
        submitButton: {{ settings.shipping_calculator_submit_button_label | default: 'Calculate shipping' | json }},
        submitButtonDisabled: {{ settings.shipping_calculator_submit_button_label_disabled | default: 'Calculating...' | json }}{% if customer %},
        customerIsLoggedIn: true{% endif %},
        moneyFormat: {{ shop.money_with_currency_format | json }}
    } );

    // Dien
    // Prevents ENTER key default behavior, e.g. form submission and page refresh, on non-button form controls
    // Only makes AJAX call if zipcode field is not empty.
    // xTODO: cookies/session storage, sanitize before storing?
    // xTODO: To debug: country resets to --- on qty change.  Probably due to same Ajax bug with Narrative Theme
    // xTODO: Focus on zipcode field on zip error; field highlight and error msg to be re-styled
    // TODO: any enhancements for logged in customers?
    jQuery(function () {
        var ratesBtn             = jQuery('#get_rates_btn');
        var ratesBtnEnabledLabel = ratesBtn.val();
        // Using jQuery :input selector to select all form controls: ':input'
        jQuery('#shipping-calculator').on('keypress', ':input', function enterKeyHandler(e) {
//            console.dir(e);
//            console.dir(this);
            if (e.which === 13) {
                // If ENTER was pressed on Calculate button, then do not preventDefault behavior
                // and focus should remain on button after form submission, for UX consistency.
                if (jQuery(this).is('[type="button"]')) {
                    var pollingLimit = 20;
                    console.log('ENTER on button');
                    setTimeout(function focusOnShippingBtn() {
                        // Focus on Calculate button only if focus was not moved to another element
                        if (jQuery('#shipping-calculator :focus').length == 0) {
                            // Focus only if btn is re-enabled, i.e. shipping rate Ajax call completed.
                            if (ratesBtn.val() === ratesBtnEnabledLabel) {
                                console.log('Focus on CALCULATE btn');
                                ratesBtn.focus();
                            }
                            else { // If btn not re-enabled yet, retry in 100ms... for 20 times max.
                                if (!pollingLimit--)
                                    return;
                                console.log('setTimeout for btn focus... ' + pollingLimit);
                                setTimeout(focusOnShippingBtn, 100);
                            }
                        }
                    }, 300);

                    return;  // exits enterKeyHandler()
                }
                // ENTER was not pressed on Calculate button...
                // If zip field empty, focus on zip field
                if (!jQuery.trim(jQuery('#address_zip').val())) {
                    console.log('ENTER caught; preventDefault; focus zip field');
                    e.preventDefault();
                    jQuery('#address_zip').focus();
                }
                else { // If zip field not empty, get rates
                    console.log('ENTER caught; triggerHandler(click)');
                    e.preventDefault();
                    // Contrary to trigger(), triggerHandler only operates on first matched element
                    jQuery('input.get-rates').triggerHandler('click');
                }
            }
        });
    });

    // Dien
    // Highlight zip field on zip error
    jQuery(function highlightZipFieldOnError() {
        var zipEl  = jQuery('#address_zip');
        var target = document.getElementById('wrapper-response');
        var config = { childList: true };
        var observer = new MutationObserver(function observeZipError(mutations) {
            mutations.forEach(function inspectMutation(m) {
                if (m.type === 'childList') {
                    m.target.scrollIntoView(false);
                    var errorEl = jQuery(m.target.querySelector('#shipping-rates-feedback.error'));
                    if (/zip/i.test(errorEl.text())) {
                        console.log('Highlighting zipcode field...');
                        errorEl.addClass('startingColor');
                        // Clean up remaining class whenever elements lose focus
                        zipEl.on('blur', function removeTransitionClass() {
                            zipEl.removeClass('transitioning');
                            errorEl.removeClass('transitioning');
                        });
                        // Call blur() before focus() so that error highlight activates even if focus was already on element
                        zipEl.addClass('address_zip__input--error').blur().focus();
                        // Return to normal focus highlight with a transition
                        zipEl.addClass('transitioning');
                        // zip error message also changes color thru a transition
                        errorEl.addClass('transitioning');
                        zipEl.removeClass('address_zip__input--error');
                        errorEl.removeClass('startingColor');
                    }
                }
            });
        });

        console.log('Connecting observer...');
        observer.observe(target, config);

/*        jQuery(window).on('beforeunload', function observerCleanup() {
            console.log('Disconnecting observer...');
            observer.disconnect();
            zipEl.removeClass('address_zip__input--error transitioning');
            jQuery('#shipping-rates-feedback').removeClass('transitioning');
        });*/
    });
</script>
{% endunless %}
