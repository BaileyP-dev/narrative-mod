<!-- DO NOT REMOVE THE FOLLOWING COMMENT -->
<!-- (c) Copyright 2014 Caroline Hill. All Rights Reserved. Contact Mlle Caroline Schnapp at mllegeorgesand@gmail.com -->
<!-- DO NOT REMOVE THE ABOVE COMMENT -->

<!-- DIEN MOD -->
<!-- Heavily modified the original version by Caroline Hill to add: -->
<!-- + Support for both "regular" cart and cart drawer -->
<!-- + Support for two cost models (settable in theme's general settings): 1) per item and 2) fixed cost -->
<!-- + Auto adjustment of gift wrap item count when number of items in cart changes (applies to per-item cost model only) -->
<!-- + Auto removal of gift wrap item if all other items in cart are removed -->
<!-- + Autosave of gift-wrap note -->
{% if linklists.gift-wrapping.links.size > 0 and linklists.gift-wrapping.links.first.type == 'product_link' %}
  <div id="is-a-gift" style="clear: left; margin: 30px 0" class="clearfix rte">
    <p>
      <input type="hidden" name="attributes[gift-wrapping]" value="" />
      <input id="gift-wrapping" type="checkbox" name="attributes[gift-wrapping]" value="yes" {% if cart.attributes.gift-wrapping %} checked="checked"{% endif %} style="float: none" />
      <label for="gift-wrapping" style="display:inline; padding-left: 5px; float: none;">
        For {{ linklists.gift-wrapping.links.first.object.price | money }}{% if settings.gift_wrapping_cost_model == 'per_item' %} per item{% endif %},
        please wrap the products in this order.
      </label>
    </p>
    <p>
      <label style="display:block" for="gift-note">Gift message (free and optional):</label>
      <textarea name="attributes[gift-note]" id="gift-note">{{ cart.attributes.gift-note }}</textarea>
    </p>
  </div>

  {% assign id = linklists.gift-wrapping.links.first.object.variants.first.id %}

  {% assign gift_wraps_in_cart = 0 %}
  {% for item in cart.items %}
    {% if item.id == id %}
      {% assign gift_wraps_in_cart = item.quantity %}
      {% assign gift_wraps_in_cart_key = item.key %}
    {% endif %}
  {% endfor %}
  {% assign items_in_cart = cart.item_count | minus: gift_wraps_in_cart %}

  {% assign gift_wrap_checkbox_id = '#gift-wrapping' %}
  {% if settings.show_cart_drawer %}
    {% assign cart_container_selector = 'div.cart-drawer__item-list' %}
    {% assign cart_item_quantity_selector = 'input.cart-drawer__item-quantity' %}
    {% assign cart_subtotal_selector = 'span.cart-drawer__subtotal-number' %}
    {% assign cart_discount_selector = 'span[data-cart-total-discount]' %}
    {% assign cart_remove_btn_selector = 'button.cart-drawer__item-delete' %}
  {% else %}
    {% assign cart_container_selector = 'tbody[data-cart-item-list]' %}
    {% assign cart_item_quantity_selector = 'input.cart-item__qty-input' %}
    {% assign cart_subtotal_selector = 'span.cart-footer__subtotal' %}
    {% assign cart_discount_selector = '' %}
    {% assign cart_remove_btn_selector = 'a.cart-item__remove' %}
  {% endif %}

  <style>
    #updates_{{ id }} { display: none; }
  </style>

  <script>
      Shopify.Cart = Shopify.Cart || {};
      Shopify.Cart.DOM = Shopify.Cart.DOM || {};

      jQuery(function () {
          "use strict";
          var SELECTORS = {
              gift_wrap_checkbox : '{{ gift_wrap_checkbox_id }}',
              cart_container : '{{ cart_container_selector }}',
              cart_item_quantity : '{{ cart_item_quantity_selector }}',
              cart_subtotal : '{{ cart_subtotal_selector }}',
              cart_discount : '{{ cart_discount_selector }}',
              cart_remove_btn : '{{ cart_remove_btn_selector }}'
          };

          /**
           * Returns the number of items in cart, excluding items associated with provided ID.
           * @method countItems
           * @for Shopify.Cart
           * @param excludedID {String} The ID of the item to exclude from the count.
           * @return {number} The number of items in cart without the excluded items.
           */
          Shopify.Cart.countItems = function (excludedID) {
              var itemsInCart = 0;
              $(SELECTORS.cart_item_quantity).each(function addItems() {
                  // Don't count items with excluded ID
                  if (excludedID && this.id.includes(excludedID)) {
                      return;
                  }
                  itemsInCart += (+this.value);
              });

              return itemsInCart;
          };

          /**
           * Initializes Cart.DOM module.
           * @method init
           * @for Shopify.Cart.DOM
           * @param observerCallback {function} A callback for MutationObserver to be invoked whenever the content of the cart changes
           */
          Shopify.Cart.DOM.init = function (observerCallback) {
              (typeof observerCallback === 'function') && (this.observerItemList = new MutationObserver(observerCallback));
          };

          /**
           * Adds gift-wrap item to cart and updates subtotal and discount, if needed. Asynchronous.
           * @method addGWItem
           * @for Shopify.Cart.DOM
           * @return {JQueryPromise} A Promise
           */
          Shopify.Cart.DOM.addGWItem = function () {
              function insertGWItemToCartDrawer(htmlStr) {
                  var stubHTML = jQuery(htmlStr);
                  var giftWrapLineItem = stubHTML[0];
                  var newSubtotalSpan = stubHTML[1];
                  var newTotalDiscountSpan = stubHTML[2];

                  // Add GW item to Cart Drawer in DOM
                  jQuery(SELECTORS.cart_container).prepend(giftWrapLineItem);
                  // Update total and discount values in DOM
                  jQuery(SELECTORS.cart_subtotal).text(newSubtotalSpan.innerText);
                  jQuery(SELECTORS.cart_discount).text(newTotalDiscountSpan.innerText);

                  // Save gift wrap cart item key
                  Shopify.Cart.GiftWrap.DOM.init(giftWrapLineItem.id);
              }

              // Retrieves "Gift Wrap Stub" page from the "Gift Wrapping" menu
              // The page contains the generated HTML node of the Gift Wrap line item to be inserted in the Cart Drawer.
              // It also includes elements with the updated subtotal and discount.
              return jQuery.ajax({
                  method: 'GET',
                  url: '{{ linklists.gift-wrapping.links[1].url }}',
                  dataType: "html"
              })
              .done(insertGWItemToCartDrawer);
          };

          /**
           * Removes gift-wrap item from cart.
           * @method removeGWItem
           * @for Shopify.Cart.DOM
           * @param gwID {String} ID of the gift-wrap element in the cart
           */
          Shopify.Cart.DOM.removeGWItem = function (gwID) {
              this.removeSensors(gwID);
              // Trigger Remove button to delete Gift Wrap item
              gwID && jQuery('#' + gwID + ' ' + SELECTORS.cart_remove_btn).trigger('click');
          };

          /**
           * Installs MutationObserver to cart node in the DOM and add listeners to input elements and remove button.
           * @method attachSensors
           * @for Shopify.Cart.DOM
           * @param gwID {String}  Gift-wrap element ID
           * @param inputChangeCb {Function} Callback on quantity input value change
           * @param removeBtnCb {Function} Callback on remove button click
           */
          Shopify.Cart.DOM.attachSensors = function (gwID, inputChangeCb, removeBtnCb) {
              var target = document.querySelector(SELECTORS.cart_container);
              var config = { childList: true };
              // Activate observer for cart's item removal or addition, enabling auto-refresh of GW qty
              this.observerItemList && this.observerItemList.observe(target, config);
              // Attach listener for qty input element change of each item, enabling auto-refresh of GW qty
              (typeof inputChangeCb === 'function') && jQuery(SELECTORS.cart_container).on('change.updateGiftWrapQuantity', SELECTORS.cart_item_quantity, inputChangeCb);
              // Attach listener to Gift Wrap item's remove button
              gwID && (typeof removeBtnCb === 'function') && jQuery('#' + gwID).on('click.removeGWLineItem', SELECTORS.cart_remove_btn, removeBtnCb);
          };

          /**
           * Removes MutationObserver and listeners from cart node in the DOM.
           * @method removeSensor
           * @for Shopify.Cart.DOM
           * @param gwID {String} Gift-wrap element ID
           */
          Shopify.Cart.DOM.removeSensors = function (gwID) {
              this.observerItemList && this.observerItemList.disconnect();
              jQuery(SELECTORS.cart_container).off('change.updateGiftWrapQuantity', SELECTORS.cart_item_quantity);
              gwID && jQuery('#' + gwID).off('click.removeGWLineItem', SELECTORS.cart_remove_btn);
          };

          /**
           * @class GiftWrap
           * @namespace Shopify.Cart
           */
          Shopify.Cart.GiftWrap = (function () {
              /**
               * Quantity of gift-wrap items in cart
               * @property _quantity
               * @type Number
               * @private
               * @default 0
               */
              var _quantity = 0;

              /**
               * The cost model of the gift-wrap service: "per_item" or "fixed_cost"
               * @property _COST_MODEL
               * @type String
               * @private
               * @final
               */
              const _COST_MODEL = '{{ settings.gift_wrapping_cost_model | default: "per_item" }}';

              function getQuantity() {
                  return _quantity;
              }

              function _setQuantity(q) {
                  if (typeof q === 'number') {
                      _quantity = q;
                  }
              }

              function getCostModel() {
                  return _COST_MODEL;
              }

              function init(quantity) {
                  _setQuantity(quantity);
              }

              /**
               * Sets the number of gift-wrap items and gift-wrap note in cart. Asynchronous because updates server-side data.
               * @method set
               * @param numItems {Number} Number of gift-wrap items
               * @param callback {Function} Callback
               */
              function set(numItems, callback) {
                  function defaultSuccess() { location.href = '/cart'; }
                  var note = jQuery('#gift-note').val();
                  var done = (typeof callback === 'function') ? callback : defaultSuccess;
                  jQuery.ajax({
                      type: 'POST',
                      url: '/cart/update.js',
                      data: {
                          updates: { {{ id }}: numItems },
                          attributes: { 'gift-wrapping': 'true', 'gift-note': note }
                      },
                      dataType: 'json',
                      success: function() {
                          _setQuantity(numItems);
                          done();
                      }
                  });
              }

              /**
               * Removes gift-wrap items from cart. Asynchronous because updates server-side data.
               * @method remove
               * @param callback {Function} Callback
               */
              function remove(callback) {
                  function defaultSuccess() { location.href = '/cart'; }
                  var done = (typeof callback === 'function') ? callback : defaultSuccess;
                  jQuery.ajax({
                      type: 'POST',
                      url: '/cart/update.js',
                      data: {
                          updates: { {{ id }}: 0 },
                          attributes: { 'gift-wrapping': '' }
                      },
                      dataType: 'json',
                      success: function () {
                          _setQuantity(0);
                          done();
                      }
                  });
              }

              return {
                  getCostModel: getCostModel,
                  getQuantity: getQuantity,
                  set: set,
                  remove: remove,
                  init: init
              };
          })(); //IIFE returning a GiftWrap object

          /**
           * @class DOM
           * @namespace Shopify.Cart.GiftWrap
           */
          Shopify.Cart.GiftWrap.DOM = (function () {
              /**
               * The gift-wrap element's ID in the DOM.
               * @property _id
               * @type String
               * @private
               * @default '' (empty string)
               */
              var _id = '';

              /**
               * The ID of the gift-wrap element escaped, i.e. safe for use in CSS selectors
               * @property _keyEscaped
               * @type String
               * @private
               * @default '' (empty string)
               */
              var _keyEscaped = '';

              /**
               * Saves the gift-wrap element's ID.
               * @method _setKey
               * @param id {String} Gift-wrap element's ID in the DOM
               * @private
               */
              function _setKey(id) {
                  if (typeof id !== 'undefined' && id !== null) {
                      _id = String(id);
                      _keyEscaped = jQuery.escapeSelector(_id);
                  }
              }

              function getKey() {
                  return _id;
              }

              /**
               * Returns gift-wrap element's ID escaped, i.e. safe for use in CSS selectors.
               * @method getKeyEscaped
               * @return {String} The gift-wrap element's ID escaped
               */
              function getKeyEscaped() {
                  return _keyEscaped;
              }

              /**
               * Initializes the object
               * @method init
               * @param id {String} Gift-wrap element's ID
               */
              function init(id) {
                  _setKey(id);
              }

              /**
               * Resets the state of the object
               * @method reset
               */
              function reset() {
                  _setKey('');
              }

              /**
               * Sets the quantity input field of the gift-wrap element in the DOM
               * @method setVal
               * @param value {Number} The quantity
               */
              function setVal(value) {
                  var key = this.getKeyEscaped();
                  // The id changes from updates_<key> to quantity_<key> after cart refresh with Theme Narrative (bug)!!!
                  if (key) {
                      jQuery('#quantity_' + key).val(value);
                      jQuery('#updates_' + key).val(value);
                  }
              }

              /**
               * Returns current value of quantity input field of the gift-wrap element in the DOM
               * @method getVal
               * @return {Number|null} Value of quantity input field or null if no gift-wrap element found.
               */
              function getVal() {
                  var key = this.getKeyEscaped();
                  // The id changes from updates_<key> to quantity_<key> after cart refresh with Theme Narrative (bug)!!!
                  if (key) {
                      return +(jQuery('#quantity_' + key).val() || jQuery('#updates_' + key).val());
                  }

                  return null;
              }
              return {
                  init: init,
                  reset: reset,
                  setVal: setVal,
                  getVal: getVal,
                  getKey: getKey,
                  getKeyEscaped: getKeyEscaped
              }
          })(); //IIFE returning GiftWrap.DOM object

      {% unless settings.show_cart_drawer %}
          // If we have nothing but gift-wrap items in the cart.
          {% if cart.items.size == 1 and gift_wraps_in_cart > 0 %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.remove();
          });
          // If we don't have the right amount of gift-wrap items in the cart.
          {% elsif gift_wraps_in_cart > 0 and gift_wraps_in_cart != items_in_cart %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          // If we have a gift-wrap item in the cart but our gift-wrapping cart attribute has not been set.
          {% elsif gift_wraps_in_cart > 0 and cart.attributes.gift-wrapping == blank %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          // If we have no gift-wrap item in the cart but our gift-wrapping cart attribute has been set.
          {% elsif gift_wraps_in_cart == 0 and cart.attributes.gift-wrapping != blank %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          {% endif %}
      {% endunless %}

          function handleRemoveGWBtn() {
              Shopify.Cart.DOM.removeSensors(Shopify.Cart.GiftWrap.DOM.getKeyEscaped());
              // Note: this does NOT trigger the "change" event on the GW checkbox
              jQuery(SELECTORS.gift_wrap_checkbox).prop('checked', false);
              Shopify.Cart.GiftWrap.remove($.noop);
              Shopify.Cart.GiftWrap.DOM.reset();
          }

          // Update gift wrap quantity to match total items quantity in cart
          function updateGiftWrapQuantity() {
              var gwKey = Shopify.Cart.GiftWrap.DOM.getKey();
              var itemsInCart = Shopify.Cart.countItems(gwKey);
              if (itemsInCart > 0) {
                  {% if settings.gift_wrapping_cost_model == 'per_item' %}
                  Shopify.Cart.GiftWrap.set(itemsInCart, function () {
                      Shopify.Cart.GiftWrap.DOM.setVal(itemsInCart);
                  });
                  {% else %}
                  // gift wrapping cost model is "fixed_cost"
                  if (Shopify.Cart.GiftWrap.getQuantity() !== 1) {
                      Shopify.Cart.GiftWrap.set(1, function () {
                          Shopify.Cart.GiftWrap.DOM.setVal(1);
                      });
                  }
                  {% endif %}
              }
              else { // No product item in cart, remove GW item from cart
                  let gwSelector = Shopify.Cart.GiftWrap.DOM.getKeyEscaped();
                  gwSelector && jQuery('#' + gwSelector + ' ' + SELECTORS.cart_remove_btn).trigger('click');
              }
          }

          // Callback for MutationObserver to monitor node addition/removal in cart's item list
          // and refresh the Gift Wrap item count accordingly
          function observeItemList(mutations) {
              var changed = mutations.some(function inspectMutation(m) {
                  if (m.type === 'childList') {
                      if (m.addedNodes.length || m.removedNodes.length) {
                          if (m.target === document.querySelector(SELECTORS.cart_container)) {
                              return true;
                          }
                      }
                  }
                  return false;
              });

              changed && updateGiftWrapQuantity();
          }

          Shopify.Cart.DOM.init(observeItemList);

          if (jQuery(SELECTORS.gift_wrap_checkbox).prop('checked')) {
              Shopify.Cart.GiftWrap.init({{ items_in_cart | default: 0 }});
              Shopify.Cart.GiftWrap.DOM.init('{{ gift_wraps_in_cart_key | default: "" }}');
              updateGiftWrapQuantity();
              let key = Shopify.Cart.GiftWrap.DOM.getKeyEscaped();
              {% if settings.gift_wrapping_cost_model == 'per_item' %}
                  Shopify.Cart.DOM.attachSensors(key, updateGiftWrapQuantity, handleRemoveGWBtn);
              {% else %}
                  Shopify.Cart.DOM.attachSensors(key, null, handleRemoveGWBtn);
              {% endif %}
          }

          // If cart drawer enabled, provide callbacks to prevent GiftWrap.set/remove from loading cart page after AJAX call
          {% if settings.show_cart_drawer %}
              var setGiftWrapCb = function () {
                  Shopify.Cart.DOM.addGWItem()
                  .done(function() {
                      var key = Shopify.Cart.GiftWrap.DOM.getKeyEscaped();
                      {% if settings.gift_wrapping_cost_model == 'per_item' %}
                      Shopify.Cart.DOM.attachSensors(key, updateGiftWrapQuantity, handleRemoveGWBtn);
                      {% else %}
                      Shopify.Cart.DOM.attachSensors(key, null, handleRemoveGWBtn);
                      {% endif %}
                  });
              };
              var removeGiftWrapCb = function () {
                  var key = Shopify.Cart.GiftWrap.DOM.getKeyEscaped();
                  Shopify.Cart.DOM.removeGWItem(key);
                  Shopify.Cart.GiftWrap.DOM.reset();
              };
          {% else %}
              var setGiftWrapCb = null;
              var removeGiftWrapCb = null;
          {% endif %}

          // When the gift-wrapping checkbox is checked or unchecked.
          // Note: to prevent double refresh of cart page in following scenario:
          // You start with a state where gift-wrap (GW) is checked and a quantity of GW product in cart.
          // You uncheck the GW checkbox, then you modify the quantities of your products in cart,
          // so that now the total of qty is different from the total qty when GW checkbox was checked.
          // When you then check the GW checkbox again, the cart will refresh and show the GW product reflecting the old total qty.
          // Now, we have the qty of GW product !== current total qty of products. This will trigger another cart refresh due to
          // the checks from the above if/elsif/endif block.
          // The change consists of performing a recount of total qty of items before setting the GW qty.
          jQuery(SELECTORS.gift_wrap_checkbox).change(function checkboxCb() {
              if (jQuery(this).prop('checked')) {
                  {% if settings.gift_wrapping_cost_model == 'per_item' %}
                      var gwKey = Shopify.Cart.GiftWrap.DOM.getKey();
                      Shopify.Cart.GiftWrap.set(Shopify.Cart.countItems(gwKey), setGiftWrapCb);
                  {% else %}
                      Shopify.Cart.GiftWrap.set(1, setGiftWrapCb);
                  {% endif %}
              }
              else {
                  Shopify.Cart.GiftWrap.remove(removeGiftWrapCb);
              }
          });

          jQuery('#gift-note').on('change', function saveGWNote() {
              var quantity  = jQuery(SELECTORS.gift_wrap_checkbox).prop('checked') ? Shopify.Cart.GiftWrap.getQuantity() : 0;
              var note      = jQuery(this).val();
              jQuery.ajax({
                  method: 'POST',
                  url: '/cart/update.js',
                  data: { updates: { {{ id }}: quantity }, attributes: { 'gift-note': note } },
                dataType: 'json'
              });
          })
      });
  </script>
{% else %}
  <p style="clear: left; margin: 30px 0" class="rte">
    You attempted to add a gift-wrapping script to your shopping cart, but it won't work because you don't have
    a link list with handle <code>gift-wrapping</code> which, in turn, contains a link
    to your gift-wrapping product. Please review the steps outlined
    <a href="http://docs.shopify.com/manual/configuration/store-customization/page-specific/cart-page/add-a-gift-wrap-option">here</a>.
  </p>
{% endif %}

