<!-- DO NOT REMOVE THE FOLLOWING COMMENT -->
<!-- (c) Copyright 2014 Caroline Hill. All Rights Reserved. Contact Mlle Caroline Schnapp at mllegeorgesand@gmail.com -->
<!-- DO NOT REMOVE THE ABOVE COMMENT -->

{% if linklists.gift-wrapping.links.size > 0 and linklists.gift-wrapping.links.first.type == 'product_link' %}
  <div id="is-a-gift" style="clear: left; margin: 30px 0" class="clearfix rte">
    <p>
      <input type="hidden" name="attributes[gift-wrapping]" value="" />
      <input id="gift-wrapping" type="checkbox" name="attributes[gift-wrapping]" value="yes" {% if cart.attributes.gift-wrapping %} checked="checked"{% endif %} style="float: none" />
      <label for="gift-wrapping" style="display:inline; padding-left: 5px; float: none;">
        For {{ linklists.gift-wrapping.links.first.object.price | money }} per item,
        please wrap the products in this order.
      </label>
    </p>
    <p>
      <label style="display:block" for="gift-note">Gift message (free and optional):</label>
      <textarea name="attributes[gift-note]" id="gift-note">{{ cart.attributes.gift-note }}</textarea>
    </p>
  </div>

  {% assign id = linklists.gift-wrapping.links.first.object.variants.first.id %}

  {% assign gift_wraps_in_cart = 0 %}
  {% for item in cart.items %}
    {% if item.id == id %}
      {% assign gift_wraps_in_cart = item.quantity %}
      <!-- DIEN -->
      {% assign gift_wraps_in_cart_key = item.key %}
    {% endif %}
  {% endfor %}
  {% assign items_in_cart = cart.item_count | minus: gift_wraps_in_cart %}

  <!-- DIEN -->
  {% assign gift_wrap_checkbox_id = 'gift-wrapping' %}
  {% if settings.show_cart_drawer %}
    {% assign cart_container_selector = 'div.cart-drawer__item-list' %}
    {% assign cart_item_class = 'cart-drawer__item-quantity' %}
    {% assign cart_subtotal_selector = 'span.cart-drawer__subtotal-number' %}
    {% assign cart_discount_selector = 'span[data-cart-total-discount]' %}
    {% assign cart_remove_btn_selector = 'button.cart-drawer__item-delete' %}
  {% else %}
    {% assign cart_container_selector = 'tbody[data-cart-item-list]' %}
    {% assign cart_item_class = 'cart-item__qty-input' %}
    {% assign cart_subtotal_selector = 'span.cart-footer__subtotal' %}
    {% assign cart_discount_selector = '' %}
    {% assign cart_remove_btn_selector = 'a.cart-item__remove' %}
  {% endif %}

  <style>
    #updates_{{ id }} { display: none; }
  </style>

  <script>
      Shopify.Cart = Shopify.Cart || {};
      Shopify.Cart.GiftWrap = {};

      // Dien
      Shopify.Cart.GiftWrap.costModel = '{{ settings.gift_wrapping_cost_model | default: "per_item" }}';
      Shopify.Cart.GiftWrap.key = '{{ gift_wraps_in_cart_key | default: "" }}';
      var giftWrapKeyEscapedStr = $.escapeSelector(Shopify.Cart.GiftWrap.key);

      // Observer to monitor nodes addition/removal in cart drawer's item list
      // and update the GW count accordingly
      Shopify.Cart.ObserverItemList = new MutationObserver(function observeItemList(mutations) {
          var changed = mutations.some(function inspectMutation(m) {
              if (m.type === 'childList') {
                  if (m.addedNodes.length || m.removedNodes.length) {
                      if (m.target === document.querySelector('{{ cart_container_selector }}')) {
                          return true;
                      }
                  }
              }
              return false;
          });

          if (changed) {
              Shopify.Cart.GiftWrap.updateGiftWrapCount();
          }
      });

      Shopify.Cart.GiftWrap.count = function () {
          var itemsInCart = 0;
          // Count total qty in cart for items that are not the gift wrap product
          $('input.{{ cart_item_class }}').each(function countItems() {
              console.log("this.id -> " + this.id);
              // If gift-wrap product is in cart, then don't count its quantity
              if (Shopify.Cart.GiftWrap.key && this.id.includes(Shopify.Cart.GiftWrap.key)) {
                  console.log("gift-wrap cart key matched");
                  return;
              }
              itemsInCart += (+this.value);
              console.log("Num items: " + itemsInCart);
          });

          return itemsInCart;
      };

      Shopify.Cart.GiftWrap.updateGiftWrapCount = function () {
          var itemsInCart = Shopify.Cart.GiftWrap.count();

          // Update gift wrap quantity to match total items quantity
          // The id changes from updates_<key> to quantity_<key> after cart refresh with Theme Narrative (bug)!!!
          if (giftWrapKeyEscapedStr) {
              jQuery('#quantity_' + giftWrapKeyEscapedStr).val(itemsInCart);
              jQuery('#updates_' + giftWrapKeyEscapedStr).val(itemsInCart);
          }
          Shopify.Cart.GiftWrap.set(itemsInCart, $.noop);
      };

      // Dien
      // Parameterized the function
      // Save gift-note
      Shopify.Cart.GiftWrap.set = function(numItems, callback) {
          function defaultSuccess() { location.href = '/cart'; }
          var done = (typeof callback === 'function') ? callback : defaultSuccess;
          var itemsInCart = (typeof numItems === 'number') ? numItems : {{ items_in_cart }};
          var note = jQuery('#gift-note').val();
          jQuery.ajax({
              type: 'POST',
              url: '/cart/update.js',
              data: { updates: { {{ id }}: itemsInCart }, attributes: { 'gift-wrapping': true, 'gift-note': note } },
          dataType: 'json',
          success: done
          });
      };

      // Dien
      // Parameterized the function
      Shopify.Cart.GiftWrap.remove = function(callback) {
          function defaultSuccess() { location.href = '/cart'; }
          var done = (typeof callback === 'function') ? callback : defaultSuccess;
          jQuery.ajax({
              type: 'POST',
              url: '/cart/update.js',
              data: { updates: { {{ id }}: 0 }, attributes: { 'gift-wrapping': '' } },
          dataType: 'json',
          success: done
          });
      };

      {% unless settings.show_cart_drawer %}
          // If we have nothing but gift-wrap items in the cart.
          {% if cart.items.size == 1 and gift_wraps_in_cart > 0 %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.remove();
          });
          // If we don't have the right amount of gift-wrap items in the cart.
          {% elsif gift_wraps_in_cart > 0 and gift_wraps_in_cart != items_in_cart %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          // If we have a gift-wrap item in the cart but our gift-wrapping cart attribute has not been set.
          {% elsif gift_wraps_in_cart > 0 and cart.attributes.gift-wrapping == blank %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          // If we have no gift-wrap item in the cart but our gift-wrapping cart attribute has been set.
          {% elsif gift_wraps_in_cart == 0 and cart.attributes.gift-wrapping != blank %}
          jQuery(function () {
              Shopify.Cart.GiftWrap.set();
          });
          {% endif %}
      {% endunless %}

      // When the gift-wrapping checkbox is checked or unchecked.
      // DIEN MODIFIED: to prevent double refresh of cart page in following scenario:
      // You start with a state where gift-wrap (GW) is checked and a quantity of GW product in cart.
      // You uncheck the GW checkbox, then you modify the quantities of your products in cart,
      // so that now the total of qty is different from the total qty when GW checkbox was checked.
      // When you then check the GW checkbox again, the cart will refresh and show the GW product reflecting the old total qty.
      // Now, we have the qty of GW product !== current total qty of products. This will trigger another cart refresh due to
      // the checks from the above if/elsif/endif block.
      // The change consists of performing a recount of total qty of items before setting the GW qty.
      jQuery(function() {
          function addGWItemToDOM() {
              // Retrieves "Gift Wrap Stub" page from the "Gift Wrapping" menu.
              // The page contains the generated HTML node of the Gift Wrap line item to be inserted in the Cart Drawer.
              // Also includes elements with the updated subtotal and discount.
              jQuery.ajax({
                  url: '{{ linklists.gift-wrapping.links[1].url }}',
                  dataType: "html"
              })
              .done(function insertGWItemtoCartDrawer(htmlStr) {
                  var stubHTML = jQuery(htmlStr);
                  var giftWrapLineItem = stubHTML[0];
                  var newSubtotalSpan = stubHTML[1];
                  var newTotalDiscountSpan = stubHTML[2];

                  // Save gift wrap cart item key
                  Shopify.Cart.GiftWrap.key = giftWrapLineItem.id;
                  giftWrapKeyEscapedStr = $.escapeSelector(Shopify.Cart.GiftWrap.key);

                  // Add GW item to Cart Drawer in DOM
                  jQuery('{{ cart_container_selector }}').prepend(giftWrapLineItem);

                  // Update total and discount values in DOM
                  jQuery('{{ cart_subtotal_selector }}').text(newSubtotalSpan.innerText);
                  jQuery('{{ cart_discount_selector }}').text(newTotalDiscountSpan.innerText);

                  attachObservers();
              });
          }

          function removeGWItemfromDOM() {
              giftWrapKeyEscapedStr && jQuery('#' + giftWrapKeyEscapedStr + ' {{ cart_remove_btn_selector }}').trigger('click');
              Shopify.Cart.GiftWrap.key = '';
              giftWrapKeyEscapedStr = '';
          }

          function updateGWQuantity() {
              if (jQuery('#{{ gift_wrap_checkbox_id }}').prop('checked')) {
                  Shopify.Cart.GiftWrap.updateGiftWrapCount();
              }
          }

          function removeGWBtnHandler() {
              removeObservers();
              // Note: this does NOT trigger the "change" event on the GW checkbox
              jQuery('#{{ gift_wrap_checkbox_id }}').prop('checked', false);
              Shopify.Cart.GiftWrap.remove($.noop);
              Shopify.Cart.GiftWrap.key = '';
              giftWrapKeyEscapedStr = '';
          }

          // Attention: Call this only when GW item is indeed present in the Cart
          // since it attaches a listener directly to the GW item remove button
          function attachObservers() {
              console.log('Attaching GW observers...');
              var target = document.querySelector('{{ cart_container_selector }}');
              var config = { childList: true };
              // Activate observer for cart's item removal or addition, enabling auto-refresh of GW qty
              Shopify.Cart.ObserverItemList.observe(target, config);
              // Attach listener for qty input element change of each item, enabling auto-refresh of GW qty
              jQuery('{{ cart_container_selector }}').on('change.updateGiftWrapCount', 'input.{{ cart_item_class }}', updateGWQuantity);
              // Attach listener to Gift Wrap item's remove button
              giftWrapKeyEscapedStr && jQuery('#' + giftWrapKeyEscapedStr).on('click.removeGWLineItem', '{{ cart_remove_btn_selector }}', removeGWBtnHandler);
          }

          function removeObservers() {
              console.log('Removing GW observers...');
              Shopify.Cart.ObserverItemList.disconnect();
              jQuery('{{ cart_container_selector }}').off('change.updateGiftWrapCount', 'input.{{ cart_item_class }}', updateGWQuantity);
              giftWrapKeyEscapedStr && jQuery('#' + giftWrapKeyEscapedStr).off('click.removeGWLineItem', '{{ cart_remove_btn_selector }}', removeGWBtnHandler);
          }

          if (jQuery('#{{ gift_wrap_checkbox_id }}').prop('checked')) {
              Shopify.Cart.GiftWrap.updateGiftWrapCount();
              attachObservers();
          }

          var setGiftWrapCb = null;
          var removeGiftWrapCb = null;
          // If cart drawer enabled, prevent set() and remove() from loading cart page by providing them alternate callbacks
          if ('{{ settings.show_cart_drawer | default: "false" }}' === 'true') {
              setGiftWrapCb = addGWItemToDOM;
              removeGiftWrapCb = removeGWItemfromDOM;
          }

          jQuery('#{{ gift_wrap_checkbox_id }}').change(function checkboxCb() {
              if (jQuery(this).prop('checked')) {
                  Shopify.Cart.GiftWrap.set(Shopify.Cart.GiftWrap.count(), setGiftWrapCb);
              }
              else {
                  removeObservers();
                  Shopify.Cart.GiftWrap.remove(removeGiftWrapCb);
              }
          });

          jQuery('#gift-note').on('change', function saveGWNote() {
              var quantity  = jQuery('#{{ gift_wrap_checkbox_id }}').prop('checked') ? Shopify.Cart.GiftWrap.count() : 0;
              var note      = jQuery(this).val();
              console.log('Saving GW note...');
              jQuery.ajax({
                  type: 'POST',
                  url: '/cart/update.js',
                  data: { updates: { {{ id }}: quantity }, attributes: { 'gift-note': note } },
                dataType: 'json'
              });
          })
      });

      // TODO: GW per item and single fee
  </script>

{% else %}
  <p style="clear: left; margin: 30px 0" class="rte">
    You attempted to add a gift-wrapping script to your shopping cart, but it won't work because you don't have
    a link list with handle <code>gift-wrapping</code> which, in turn, contains a link
    to your gift-wrapping product. Please review the steps outlined
    <a href="http://docs.shopify.com/manual/configuration/store-customization/page-specific/cart-page/add-a-gift-wrap-option">here</a>.
  </p>
{% endif %}

