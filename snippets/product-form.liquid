{% comment %}
DIEN MOD:
+ Added support for custom line item properties.
    - they can be added from Theme Editor
    - they can be set as "required" (or not) from the Theme Editor
    - their names can be customized from Theme Editor
    - their type (text, file, number, checkbox) can set from Theme Editor
    - For Type=number, the range can be set from Theme Editor
+ Added quantity-in-cart tooltip.
{% endcomment %}
<style>
    .product__add-to-cart-container {
        position: relative;
    }
    .product__tooltip-quantity-in-cart {
        width: 2em;
        height: 2em;
        position: absolute;
        top: -1em;
        right: -1em;
        z-index: 999;
        border-radius: 50%;
        background-color: #ffa500;
        color: #fff;
        font-size: 1.2rem;
        font-weight: 700;
        line-height: 2;
        text-align: center;
        cursor: default;
        -webkit-transform: scale(0.1, 0.1);
        -moz-transform: scale(0.1, 0.1);
        -ms-transform: scale(0.1, 0.1);
        -o-transform: scale(0.1, 0.1);
        transform: scale(0.1, 0.1);
        transition: transform 1s cubic-bezier(0.175, 0.885, 0.32, 1.275);
    }
    .product__tooltip-quantity-in-cart[data-has-more]:hover:before {
        content: attr(data-more);
        display: block;
        position: absolute;
        bottom: 115%;
        right: -10%;
        padding: 2px 6px;
        border: 1px solid #ffa500;
        border-radius: 4px;
        line-height: normal;
        font-size: 1rem;
        font-weight: normal;
        white-space: pre;
        color: #4a4a4a;
        background-color: #fff;
    }
    .product__tooltip-quantity-in-cart[data-has-more]:hover:after {
        content: '';
        display: block;
        position: absolute;
        bottom: 105%;
        left: 25%;
        width: 7px;
        height: 7px;
        background-color: #ffffff;
        border-right: 1px solid #ffa500;
        border-bottom: 1px solid #ffa500;
        -webkit-transform: rotate(45deg);
        -moz-transform: rotate(45deg);
        -ms-transform: rotate(45deg);
        -o-transform: rotate(45deg);
        transform: rotate(45deg);
    }
    .product__tooltip-icon {
        width: 100%;
        height: 100%;
        position: absolute;
        top: 0;
        left: 0;
        fill: #ffffff;
    }
    .product__tooltip-number {
        z-index: 1000;
    }
    .completely-hidden {
        display: none;
    }
    .scale-to-size {
        -webkit-transform: scale(1, 1);
        -moz-transform: scale(1, 1);
        -ms-transform: scale(1, 1);
        -o-transform: scale(1, 1);
        transform: scale(1, 1);
        -webkit-transform-origin: center;
        -moz-transform-origin: center;
        -ms-transform-origin: center;
        -o-transform-origin: center;
        transform-origin: center;
    }
</style>
<form class="product-form" action="/cart/add" method="post" enctype="multipart/form-data">
  {% unless product.variants.size == 1 and product.options.size == 1 and product.options.first == 'Title' and product.variants.first.title == 'Default Title' %}
    {% for option in product.options_with_values %}
      <div class="product-form__item supports-js">

        {% if option.name != 'default' %}
          <label class="single-option-selector__label{% unless section.settings.show_variant_labels %} single-option-selector__label--hidden{% endunless %}" for="{{option.name}}">{{ option.name }}</label>
        {% endif %}

        <select id="{{option.name}}" name="{{option.name}}" class="single-option-selector" data-option-input>
          {% for value in option.values %}
            <option value="{{ value }}" {% if option.selected_value == value %}selected{% endif %}>{{ value }}</option>
          {% endfor %}
        </select>
      </div>
    {% endfor %}
  {% endunless %}

  <select name="id" class="product-form__master-select supports-no-js" data-master-select>
    {% for variant in product.variants %}
      {% if variant.available %}

        {% comment %}
        Note: if you use option_selection.js, your select tag will be overwritten, meaning what you have inside <option> will not reflect what you coded below.
        {% endcomment %}
        <option {% if variant == product.selected_or_first_available_variant %} selected="selected" {% endif %} data-sku="{{ variant.sku }}" value="{{ variant.id }}">{{ variant.title }} - {{ variant.price | money_with_currency }}</option>

      {% else %}
        <option disabled="disabled">
          {{ variant.title }} - {{ 'products.product.sold_out' | t }}
        </option>
      {% endif %}
    {% endfor %}
  </select>

  {% if section.settings.show_quantity_selector %}
    <div class="product-form__item product-form__quantity-selector">
      <label class="product-form__quantity-label{% unless section.settings.show_variant_labels %} product-form__quantity-label--hidden{% endunless %}" for="Quantity-{{ section.id }}">{{ 'products.product.quantity' | t }}</label>
      <input class="product-form__quantity-input" type="number" id="Quantity-{{ section.id }}" name="quantity" value="1" min="1" pattern="[0-9]*">
    </div>
  {% endif %}

  {% comment %}
  DIEN MOD
  ------------------------------------------------------------------------------
  Custom Properties
  ------------------------------------------------------------------------------
  {% endcomment %}
  {% unless section.blocks == empty %}
    {% for block in section.blocks %}
      {% if block.type == 'custom-property' %}
      <div class="product-form__item" {{ block.shopify_attributes }}>
        {% if block.settings.custom_property_type == 'checkbox' %}
          <p class="line-item-property__field" {{ block.shopify_attributes }}>
            <input type="hidden" name="properties[{{ block.settings.custom_property_name | strip_html }}]" value="No">
            <input type="checkbox" {% if block.settings.custom_property_required %} required {% endif %} class="product-form__custom-property-input" value="Yes" id="{{ block.type }}-{{ block.id }}-{{ section.id }}" name="properties[{{ block.settings.custom_property_name | strip_html }}]" >
          {% if block.settings.custom_property_name != empty %}
            <label class="product-form__custom-property-checkbox-label" for="{{ block.type }}-{{ block.id }}-{{ section.id }}">{{ block.settings.custom_property_name | strip_html }}</label>
          {% endif %}
          </p>
        {% else %}
          {% if block.settings.custom_property_name != empty %}
            <label class="product-form__custom-property-label" for="{{ block.type }}-{{ block.id }}-{{ section.id }}">{{ block.settings.custom_property_name | strip_html }}</label>
          {% endif %}
          <input {% if block.settings.custom_property_required %} required {% endif %} class="product-form__custom-property-input" type="{{ block.settings.custom_property_type }}" id="{{ block.type }}-{{ block.id }}-{{ section.id }}" name="properties[{{ block.settings.custom_property_name | strip_html }}]"
            {% if block.settings.custom_property_type == 'number' %}
              step="1" pattern="[0-9]*"
              {% case block.settings.custom_property_number_range %}
                {% when 'positive' %} min="0"
                {% when 'positive_no_zero' %} min="1"
                {% else %}
              {% endcase %}
            {% endif %} >
        {% endif %}
      </div>
      {% endif %}
    {% endfor %}
  {% endunless %}

  {% comment %}
  DIEN MOD:
    Added "tooltip" indicating quantity of viewed product already in cart.
    Note: An extra div of class product_add-to-cart-container was added as parent of both the button and the tooltip.
    This allows the tooltip to be absolutely positioned to the top-right corner of container, which has the same dimensions as the button's.
    So the tooltip will always apprear on the same corner of the button.
    Another option is to have the tooltip as a child of button but the effects on mouse events and outlining on focus make it less ideal.
    Example: hovering on the tooltip would highlight the button, even though visually, part of the tooltip appears outside the button.
  ------------------------------------------------------------------------------
  Cart
  ------------------------------------------------------------------------------
  {% endcomment %}
  <div class="product__add-to-cart">
    <div class="product__add-to-cart-container">
        <button class="btn btn--to-secondary btn--full product__add-to-cart-button" data-cart-submit type="submit" name="add" aria-live="polite"{% unless current_variant.available %} disabled="true"{% endunless %} aria-live="polite">
          <span class="primary-text" aria-hidden=false data-cart-primary-submit-text>
            {% unless current_variant.available %}
              {{ 'products.product.sold_out' | t }}
            {% else %}
              {{ 'products.product.add_to_cart' | t }}
            {% endunless %}
          </span>
          <span class="secondary-text" aria-hidden=true data-cart-secondary-submit-text>{{ 'products.product.view_cart' | t }}</span>
        </button>
        {%- assign cart_type = sections.header.settings.icon | default: 'bag' -%}
        {%- assign icon = 'icon-header-' | append: cart_type -%}
        <aside class="product__tooltip-quantity-in-cart visually-hidden" data-has-more data-more="Quantity of this product in cart"><span class="product__tooltip-icon completely-hidden">{% include icon %}</span><span class="product__tooltip-number"></span></aside>
    </div>
    <p class="product__notification text-small text-center" data-cart-notification></p>
  </div>
</form>
<script>
    /* DIEN MOD:
    * "Quantity in cart" tooltip
    * */
    jQuery(function quantityTooltip($) {
        "use strict";

        /**
         * Queries cart's content and updates the tooltip accordingly
         * @method updateTooltip
         * @for quantityTooltip
         * @returns {JQueryPromise} A Promise from Ajax call.
         */
        function updateTooltip() {
            var productId = {{ product.id | default: 0 }};
            return ($.ajax({
                method: 'GET',
                url: '/cart.js',
                dataType: 'json'
            })
            .done(function inspectCart(cart) {
                if (cart.item_count > 0) {
                    var foundItems = cart.items.filter(function findItems(item) {
                        return (item.product_id === productId);
                    });

                    var total = 0;
                    for (let i = foundItems.length; --i >= 0; ) {
                        total += foundItems[i].quantity;
                    }

                    // Update the quantity tooltip
                    if (total) {
                        $('.product__tooltip-quantity-in-cart').removeClass('visually-hidden').addClass('scale-to-size');
                        $('.product__tooltip-quantity-in-cart .product__tooltip-number').text(total);
                    }
                    else {
                        $('.product__tooltip-quantity-in-cart').addClass('visually-hidden').removeClass('scale-to-size');
                        $('.product__tooltip-quantity-in-cart .product__tooltip-number').text('');
                    }
                }
            })
            .fail(function ajaxErrorHandler(jqXHR, textStatus) {
                console.log('Failed GET cart.js with status: ' + textStatus);
            }));
        }

        updateTooltip();

        // Listens to Ajax requests to cart and updates tooltip if necessary.
        // Note: Variable jQuery is used here instead of $ as some themes like Narrative augmented jQuery.
        //      If augmented jQuery's ajax() was used throughout the theme, then attaching handlers with $ would not trigger them.
        jQuery(document).on('ajaxComplete.tooltip', function listenToCartAjax(event, request, setting) {
            if (/cart\/(?:update|add|change|clear)/i.test(setting.url)) {
                jQuery(document).off('ajaxComplete.tooltip');
                updateTooltip().always(function attachAjaxCompleteHandler() {
                    jQuery(document).off('ajaxComplete.tooltip');
                    jQuery(document).on('ajaxComplete.tooltip', listenToCartAjax);
                });
            }
        });
    });
</script>
